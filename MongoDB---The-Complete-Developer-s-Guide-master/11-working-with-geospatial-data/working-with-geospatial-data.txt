----------------- Working with geo-spatial data--------------

// Storing Gea-spatial data in Geo-JSON Format
// Querying Gea-spatial Data

// GeoJson value is a embedded document, it contains two fields
1. type --> specifies the GeoJson object type
2. coordinates --> two values [longitude, latitude] in this format

// some operations ($near) require such an index.
// but other operations like $geoWithin does not require index.
// still can be used to speed up queries

GeoJson object Type: 1. Point 2. Line String 3. MultiLineString 4. Polygon 5. MultiPolygon 6. MultiPoint 7. GeometryCollection

// $GeoSpatial Queries : $near, $geoWithin, $geoIntersects
// GeoSpatial queries work with GeoJson data

> use awesomeplaces
switched to db awesomeplaces
> db.places.insertOne({name:'California Academy of Science',location:{type:'Point',coordinates:[-122.4724356, 37.7672544]}})

// this is the GeoJson object
> db.places.findOne()
{
	"_id" : ObjectId("5f2f7ac7f82aee4b45288303"),
	"name" : "California Academy of Science",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4724356,
			37.7672544
		]
	}
}

// let execute query into GeoJson data
// to get our current location we have to use webApi or mobile api have to use any other process so that user's can locate themselves

------------Finding nearest places from current location-------------

// i want to find some places near my current location (sherpur home)
// let's this is my location
latitude : 25.0218715, longitude : 90.0106577

// Sherpur Government University College position --> latitude: 25.017493,longitude : 90.011495
> db.places.insertOne({name:'Sherpur Government University College',location:{type:'Point',coordinates:[90.011495,25.017493]}})

// certain radius
// first we have to create GeoSpatial index to track the distance
// here the index name is '2dsphere'
> db.places.createIndex({location: '2dsphere'})

// let find my nearest places
> db.places.find({location: {$near: {$geometry: {type: 'Point', coordinates: [90.0106577, 25.0218715]}}}}).pretty()
{
	"_id" : ObjectId("5f2f81bef82aee4b45288304"),
	"name" : "Sherpur Government University College",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			90.011495,
			25.017493
		]
	}
}
{
	"_id" : ObjectId("5f2f7ac7f82aee4b45288303"),
	"name" : "California Academy of Science",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4724356,
			37.7672544
		]
	}
}

// we can add also max and min distance into the query
> db.places.find({location: {$near: {$geometry: {type: 'Point', coordinates: [90.0106577, 25.0218715]}, $maxDistance: 30, $minDistance: 10}}}).pretty()
// we don't get any value, cause no places found with the distance that gives

// i calculate the distance between my current location and Sherpur Government University College is 200.00m to 350m approximate

// so we have to add max distance a little bit large

> db.places.find({location: {$near: {$geometry: {type: 'Point', coordinates: [90.0106577, 25.0218715]}, $maxDistance: 500, $minDistance: 20}}}).pretty()
{
	"_id" : ObjectId("5f2f81bef82aee4b45288304"),
	"name" : "Sherpur Government University College",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			90.011495,
			25.017493
		]
	}
}

--------------Finding Points inside a covered area---------------------

// want to find all coordinates around the area
// could be sphere, any polygon
// which points are inside of the area.
// here consider 4 points
// previous California Academy of Science point also

// insert points
> db.places.insertOne({name:'Conservatory of Flowers',location:{type:'Point',coordinates:[-122.4615748, 37.7701756]}})
> db.places.insertOne({name:'Golden Gate Park Tennis',location:{type:'Point',coordinates:[-122.4593702, 37.7705046]}})
> db.places.insertOne({name:'Nopa',location:{type:'Point',coordinates:[-122.4389058, 37.7747415]}})

// show all documents
> db.places.find().pretty()

// lets draw a polygon with the four points to check the area points exist in database that covered by the area
> const p1 = [-122.4547, 37.77473]
> p1
[ -122.4547, 37.77473 ]
> const p2 = [-122.45303, 37.76641]
> const p3 = [-122.51026, 37.76411]
> const p4 = [-122.51088, 37.77131]

// here do not use $near instead use $geoWithin -->this can help to find all elements within a certain shape, within a certain object, typically something like polygon
// have to also add p1(first corner) again, cause to complete the polygon and also close the polygon

p1 ----------------- p2
   |               |
   |               |
   |			   |
p4 ----------------- p3

> db.places.find({location: {$geoWithin: {$geometry: {type: 'Polygon', coordinates: [[p1, p2, p3, p4, p1]]}}}}).pretty()
{
	"_id" : ObjectId("5f2f9194f82aee4b45288305"),
	"name" : "Conservatory of Flowers",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4615748,
			37.7701756
		]
	}
}
{
	"_id" : ObjectId("5f2f931ff82aee4b45288306"),
	"name" : "Golden Gate Park Tennis",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4593702,
			37.7705046
		]
	}
}
{
	"_id" : ObjectId("5f2f7ac7f82aee4b45288303"),
	"name" : "California Academy of Science",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4724356,
			37.7672544
		]
	}
}


-----------------Finding Out if a User is Inside a Specific Area----------------

// Now another typical use case would be the opposite, that have an application where want to find out whether the user is in a certain area.

// so don't want to find all places in an area but want to store a couple of different areas potentially in the database

// let's say the neighborhoods of a city and then user sends some coordinates because he located himself and want to find out in which neighborhood the user is.

// So essentially the same query as before, just the other way around.

// let insert data into new collections
> db.areas.insertOne({name: 'Golden Gate Park' ,area: {type: 'Polygon', coordinates: [[p1, p2, p3, p4, p1]]}})
> db.areas.find().pretty()

// now create an index
> db.areas.createIndex({area: '2dsphere'})

// basically check $geoIntersects is true or false
// here .p --> means query point
p1 ----------------- p2
   |               |
   |      .p       |
   |			   |
p4 ----------------- p3

// Golden Gate Park is in -122.49089, 37.76992
// result --> here can see all points intersect
> db.areas.find({area: {$geoIntersects: {$geometry: {type: 'Point', coordinates: [-122.49089, 37.76992]}}}}).pretty()


// check with the outside point
// result --> do not find any point
> db.areas.find({area: {$geoIntersects: {$geometry: {type: 'Point', coordinates: [-122.48446, 37.77776]}}}}).pretty()

----------------Finding Places Within a Certain Radius---------------------

// want to find all elements with unsorted order that are within certain radius
// want to find all places that are within a place or an area
// here have to use geoWithin not geoIntersects
// also can use $centerSphere operator instead of $geometry operator
// $centerSphere is a helpful operator that allows to quickly get a circle ar a point
// so essentially it use a radius and a center and gives the whole circle around that center therefore.
// $centerSphere first element--> the coordinates of the center of the circle want to draw.(-122.46203,37.77286)
// $centerSphere second element --> a radius length with meter(m) , now interested into kilometers
// here use one kilometer
// convert distance to radius, 6378.1 kilometer is a earth radius
// here use places collection
> db.places.find({location: {$geoWithin: {$centerSphere: [[-122.46203, 37.77286], 1 / 6378.1]}}}).pretty()
{
	"_id" : ObjectId("5f2f9194f82aee4b45288305"),
	"name" : "Conservatory of Flowers",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4615748,
			37.7701756
		]
	}
}
{
	"_id" : ObjectId("5f2f931ff82aee4b45288306"),
	"name" : "Golden Gate Park Tennis",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4593702,
			37.7705046
		]
	}
}

// California Academy of Science coordinates is falsely inserted, so update the query
> db.places.updateOne({_id: ObjectId("5f2f7ac7f82aee4b45288303")}, {$set: {location: {type: 'Point', coordinates: [-122.46636, 37.77014]}}})
> db.places.find({location: {$geoWithin: {$centerSphere: [[-122.46203, 37.77286], 1 / 6378.1]}}}).pretty()
{
	"_id" : ObjectId("5f2f7ac7f82aee4b45288303"),
	"name" : "California Academy of Science",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.46636,
			37.77014
		]
	}
}
{
	"_id" : ObjectId("5f2f9194f82aee4b45288305"),
	"name" : "Conservatory of Flowers",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4615748,
			37.7701756
		]
	}
}
{
	"_id" : ObjectId("5f2f931ff82aee4b45288306"),
	"name" : "Golden Gate Park Tennis",
	"location" : {
		"type" : "Point",
		"coordinates" : [
			-122.4593702,
			37.7705046
		]
	}
}

// result--> here get the data with unsorted order. To sort the data apply manuel approach
// $near is the solution of sorted list
