---------------------Index and others-----------------------

// different Types of Indexes
// Using and Optimizing Indexes
// indexes are order list of values
// Its point related index just like a pointer indexes
// Indexes are updated with every insert

----------- What ant Why -------------
1. Indexes allow to retrieve data more efficiently (if used correctly) because queries only have to look at a subset of all documents.

2. Can use single-field, compound, multi-key(array) and text indexes.

3. Indexes don't come for free, they will slow down writes.
---------- Queries & Sorting -----------
4. Indexes can be used for both queries and efficient sorting.

5. Compound indexes can be used as a whole or in a 'left-to-right' (prefix) manner (e.g only consider the 'name' of the 'name-age' compound index)


// Adding a Single Field Index
> use contactData
> db.contacts.find({'dob.age': {$gt: 60}}).pretty()

//analyze database with explain() method
> db.contacts.explain().find({'dob.age': {$gt: 60}})

// here also have a different types of plan --> 1. winningPlan 2. rejectedPlans
// getting the detailed query
> db.contacts.explain("executionStats").find({'dob.age': {$gt: 60}})

// creating index, index is defined as a document
// here one basically means i want to sort the data with ascending order
> db.contacts.createIndex({'dob.age': 1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}

// if change the query then it works like before
// Without index every different query ha different values
> db.contacts.explain("executionStats").find({'dob.age': {$gt: 20}})

// dropping the index
> db.contacts.dropIndex({'dob.age': 1})
{ "nIndexesWas" : 2, "ok" : 1 }

// Understanding Index Restrictions
> db.contacts.explain("executionStats").find({'dob.age': {$gt: 20}})

// if have to retrieve large number of documents nearly 70 to 80% then index can effect the query be slower,cause for using query we have to add an extra step.

// for retrieving 20-30% or lower can using index, query be faster
// creating a compound index with text
> db.contacts.createIndex({gender: 1})
// get explain after creating index
> db.contacts.explain("executionStats").find({gender: "male"})

## want to find all persons who are older than 30 and male or older than 40 and male
// when using multiple fields for query in index, basically one combined index is created from multiple fields.
// here created one combined index from two fields
// every time have to drop if uses the same filed
> db.contacts.dropIndex({'gender': 1})
> db.contacts.createIndex({'dob.age': 1,'gender': 1})

// getting info from query
> db.contacts.explain().find({'dob.age': 35,'gender': 'male'})

// if want to execute single index from multiple combined index its work left to right
"indexName" : "dob.age_1_gender_1"

// it works fine, means it works with index scan
> db.contacts.explain().find({'dob.age': 35})
// it does not work properly means, it works with colum scan
> db.contacts.explain().find({'gender': 'male'})

// using indexes for sorting
// this query also works like indexes
// this also use index scan
"indexName" : "dob.age_1_gender_1",
> db.contacts.explain().find({'dob.age': 35}).sort({gender: 1})

// mongo db reserves 32mb for fetched documents when using sort

// understanding the default index and find how many indexes into documents
> db.contacts.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "contactData.contacts"
	},
	{
		"v" : 2,
		"key" : {
			"dob.age" : 1,
			"gender" : 1
		},
		"name" : "dob.age_1_gender_1",
		"ns" : "contactData.contacts"
	}
]
---------------------configuring Indexes-------------------------
// every indexes _id is a unique by default
// can not add same value into same document
> db.contacts.createIndex({email: 1}, {unique: true})
{
	"ok" : 0,
	"errmsg" : "E11000 duplicate key error collection: contactData.contacts index: email_1 dup key: { : \"abigail.clark@example.com\" }",
	"code" : 11000,
	"codeName" : "DuplicateKey"
}
> db.contacts.find({email: 'abigail.clark@example.com'}).count()
// by checking can find unique value exist or not

// Understanding Partial Filters
> db.contacts.dropIndex({'dob.age': 1, gender: 1})

// now create is an index on age, not on gender but on age but only for elements where the underlying document is for a male.
> db.contacts.createIndex({'dob.age': 1}, {partialFilterExpression:{gender: 'male'}})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}

// can also use age query
> db.contacts.createIndex({'dob.age': 1}, {partialFilterExpression:{'dob.age': {$gt: 60}}})
// this does not work. because as a partial index we have to also use gender
> db.contacts.explain().find({'dob.age': {$gt: 60}})
// this works with index scan
> db.contacts.explain().find({'dob.age': {$gt: 60}, gender: 'male'})


-------------------applying the Partial Index-----------------------
> db.users.insertMany([{name: 'Max', email: 'max@test.com'},{name: 'Manu'}])
// implementing unique key with email
> db.users.createIndex({email: 1}, {unique: true})

// if now want to add new user without email, it says duplicate index error, because no values store twice.
> db.users.insertOne({name: 'Anna'})

// but a person could not have email
> db.users.dropIndex({email: 1})

// now we create index a bit differently.
> db.users.createIndex({email: 1},{unique: true, partialFilterExpression: {email: {$exists: true}}})

// now add user without email, it works
> db.users.insertOne({name: 'Anna'})

// now we have three user one have email and others two without email
> db.users.find().pretty()

// as partial index already created we can not add new user with same email
> db.users.insertOne({name: 'Anna', email: 'max@test.com'})

// this section index options
------------------------Understanding the Time-To-Live(TTL) index--------------------

// this works like session
// clear data after some duration
// self destroying data
> db.sessions.insertOne({data: 'Sample data', createdAt: new Date()})
> db.sessions.find().pretty()

// now add time to live index, can create with normal ascending text
> db.sessions.createdIndex({createdAt: 1})
> db.sessions.dropIndex({createdAt: 1})

// add indexes with differently
> db.sessions.createIndex({createdAt: 1}, {expireAfterSeconds: 10})

// after 10 seconds the document will be destroyed
> db.sessions.find().pretty()

-----------------------Query Diagnosis and Query Planing-------------------

// explain() it contains three types of parameter
1. 'queryPlanner' --> Show Summary for Executed Query + Winning Plan
2. 'executionsStats' --> Show Detailed Summary for Executed Query + Winning Plan + Possibly Rejected Plans
3. 'allPlanExecution' --> Show Detailed Summary for Executed Query + Winning Plan + Winning Plan Decision Process

// Efficient Queries and Covered Queries
// Milliseconds Process Time
IXSCAN typically beats(1. of keys(in index) Examined 2. of Documents Examined 3. of Documents Returns) COLLSCAN

// Understanding Covered Queries
> db.customers.insertMany([{name: 'Max', age: 29, salary: 3000}, {name: 'Manu', age: 30, salary: 4000}])

// creating index
> db.customers.createIndex({name: 1})
> db.customers.getIndexes()

// get info
> db.customers.explain('executionStats').find({name: 'Max'})

// lets implement covered queries
// if can optimize query, than have to reach that covered query state
// useful when typically return the specific fields
> db.customers.explain('executionStats').find({name: 'Max'},{_id: 0, name: 1})

------------------How mongoDB rejects a plan------------------

// creating a compound index
// order is important for compound index
// name index here wouldn't make much sense
// if age comes first, we can also filter just for age and take advantage of this index.
// if filtered for just name and didn't have that index, name could not be supported by index.

// here we can use just age or combination of age and name.
> db.customers.createIndex({age: 1, name: 1})

// let execute query, when execute query order does not matter in compound index
> db.customers.explain().find({age: 30, name: 'Max'})
> db.customers.explain().find({name: 'Max', age: 30})

// wining plan
 1. Approach 1
 2. Approach 2
 3. Approach 3 --> winning Plan --> Cached --> Cache --> but cache is not there forever

// Clearing the Winning Plan from Cache

                 | 1. Write Threshold (currently 1,000)
Stored Forever?--| 2. Index is Rebuilt
                 | 3. Other Indexes are Added or Removed
                 | 4. MongoDB Server is Restarted

> db.customers.insertOne({name:'Raju', age:22, salary: 1000})

// get details of all plan
// here we get the all details of plan which be good and execution time
> db.customers.explain('allPlansExecution').find({age: 30, name: 'Max'})

------------------------ Using Multi Key Indexes ------------------------

// insert new data into new table
> db.contactsinfo.insertOne({name:'Max', hobbies:['Cooking', 'Sports'], assress: [{street: 'Main Street'}, {street: 'Second Street'}]})

> db.contactsinfo.findOne()
// create an index
> db.contactsinfo.createIndex({hobbies: 1})
> db.contactsinfo.find({hobbies: 'Sports'}).pretty()

// execute explain
// here multi key is true, it is created when documents into array
> db.contactsinfo.explain('executionsStats').find({hobbies: 'Sports'})

// lets create another index
> db.contactsinfo.createIndex({addresses: 1})

// here index does not work,cause it does not work on nested documents query
> db.contactsinfo.explain('executionStats').find({'addresses.street': 'Main Street'})

// it works when query like
// Basically it works like normal
> db.contactsinfo.explain('executionStats').find({addresses: {street: 'Main Street'}})

// if the index is created like then it works, it also have a multi key index
> db.contactsinfo.createIndex({'addresses.street': 1})
// this is now index scan
> db.contactsinfo.explain('executionStats').find({'addresses.street': 'Main Street'})

// Still multi key index is super helpful if have queries that regularly target array values or even nested values or values in an embedded document in arrays.
// There are a couple of restrictions or one important restriction to be precise when using multi key indexes

// create a multi key compound index, it is also possible, when have one multi key
> db.contactsinfo.createIndex({name: 1, hobbies: 1})

// but parallel arrays can not create multiple compound index
> db.contactsinfo.createIndex({addresses: 1, hobbies: 1})

------------------------- Understanding 'text' indexes----------------------

// this is a special type of multi key index
this product is a must-buy for all fans of modern fiction!
// from the sentence the text index : product,must,buy,fans,modern,fiction
// if an array of single words or array of keywords essentially to search text.

// create a new collections
> db.products.insertMany([{title: 'A book', description: 'This is an awesome book about a young artist!'}, {title: 'Red T-Shirt', description: 'This T-Shirt is red and it is pretty awesome'}])

// create an index
// this is a single field index and can search with exact text
> db.products.createIndex({description: 1})

// to create text index to split the sentence
// so drop the previous index
> db.products.dropIndex({description: 1})
// create text index --> special kind of index
// in text index remove all the stop words and store all the keyword into array essentially
> db.products.createIndex({description: 'text'})

// Now might be wondering why do not need to specify the field in which want to search pretty expensive as can imagine.
// if have a lot of long text that has to be split up,don't want to do this like 10 times per collection and therefore,only have one text index where this could look into.

// can actually merge multiple fields into one text index.
// everything is stored as lowercase.
> db.products.find({$text: {$search: 'awesome'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome"
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}

> db.products.find({$text: {$search: 'book'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}

// here red into second document and book into first document
> db.products.find({$text: {$search: 'red book'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome"
}

// can search with exactly phrase
> db.products.find({$text: {$search: "\"red book\""}}).pretty()
> db.products.find({$text: {$search: "\"awesome book\""}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}

---------------------Text Indexes Sorting---------------------

// it works in new version automatically
> db.products.find({$text: {$search: "awesome t-shirt"}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome"
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}

// but in previous version
> db.products.find({$text: {$search: "awesome t-shirt"}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome"
}

// lets add sorting query. in this query check how many words match with each documents.
// score increase with the number of matching words
// which score is higher comes into first position

> db.products.find({$text: {$search: "awesome t-shirt"}}, {score: {$meta: 'textScore'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!",
	"score" : 0.6
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome",
	"score" : 1.7999999999999998
}

// if sort does not work automatically add sort function and sort by score.
> db.products.find({$text: {$search: "awesome t-shirt"}}, {score: {$meta: 'textScore'}}).sort({score: {$meta: 'textScore'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome",
	"score" : 1.7999999999999998
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!",
	"score" : 0.6
}

--------------------------Combining Text Indexes---------------------

> db.products.getIndexes()
> db.products.findOne()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}

// if we now add text indexes with title like that it would be an error.
// already text index is added with description in the document.
// index option conflict
// in every document we can must add only one text index
> db.products.createIndex({title: 'text'})

// can merge the text of multiple fields together into one text index.
// now drop the previous description text index, dropping text index is little bit different
// have include the text index name
> db.products.dropIndex('description_text')
{ "nIndexesWas" : 2, "ok" : 1 }

// now add two fields like title and description to create combined text index
> db.products.createIndex({title:'text',description: 'text'})
// insert a new element
> db.products.insertOne({title: 'A Ship', description: 'Floats perfectly!'})
// let execute query
> db.products.find({$text: {$search: 'ship'}})
> db.products.find({$text: {$search: 'awesome'}}).pretty()

// search with multiple text
> db.products.find({$text: {$search: 'ship t-shirt'}}).pretty()
> db.products.find({$text: {$search: 'awesome'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome"
}
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book about a young artist!"
}

--------------------Using Text Index To Exclude Words------------------

// to exclude words in search just add '-' before word
// here want to search awesome but in the sentence if get awesome then exclude t-shirt
> db.products.find({$text: {$search: 'awesome -t-shirt'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a3"),
	"title" : "A book",
	"description" : "This is an awesome book abou a young artist!"
}

--------------------Setting the Default Language Using Weights-------------------

// first dropping the previous text index
> db.products.dropIndex('title_text_description_text')
// pass some config
> db.products.createIndex({title:'text',description: 'text'},{default_language: 'german', weights: {title: 1, description: 10}})
// can also work without weights, but without weights score value can be changed.
> db.products.createIndex({title:'text',description: 'text'},{default_language: 'english'})

> db.products.find({$text: {$search: '', $language: 'german'}}).pretty()
// caseSensitive default is false
> db.products.find({$text: {$search: '', $caseSensitive: true}}).pretty()
> db.products.createIndex({title:'text',description: 'text'},{default_language: 'english', weights: {title: 1, description: 10}})

// execute query
> db.products.find({$text: {$search: 'red',}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome"
}

> db.products.find({$text: {$search: 'red'}},{score: {$meta: 'textScore'}}).pretty()
{
	"_id" : ObjectId("5f2adb2fbcaaeedce48e55a4"),
	"title" : "Red T-Shirt",
	"description" : "This T-Shirt is red and it is pretty awesome",
	"score" : 6.666666666666667
}

--------------------- Building Indexes-----------------------

1. Foreground:
   a) Collection is locked during index creation.
   b) Faster
2. Background
   a) Collection is accessible during index creation.
   b) Slower

// In the previous, discussed about Foreground index(basically access from core db)
// now create an index that basically a Background index
// first discuss why Background index needs

> use credit
switched to db credit
> show collections
ratings
> db.ratings.find().count()
1000000

> db.ratings.findOne()

// create an index with the age
// here time is important cause documents size 100000
> db.ratings.createIndex({age: 1})

// when creating an index into large scale documents or even a complex documents, db or documents is locked for a few seconds or couple of minutes
// specially text indexes also need more time
// so this is not an alternative production database

// after creating index if want to insert a new document into a large scale document then it also take a few lengthy time
> db.ratings.insertOne({person_id: 'a39djd', score: 55.2211, age: 90})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f2ced58f48b8c5c77285c65")
}

// let examine the query
> db.ratings.explain('executionStats').find({age: {$gt: 80}})
"executionTimeMillis" : 156
> db.ratings.find({age: {$gt: 80}}).count()
99792

// let drop the index
> db.ratings.dropIndex({age: 1})

// let execute previous query
> db.ratings.explain('executionStats').find({age: {$gt: 80}})
"executionTimeMillis" : 367


// let create a Background index
// in Background index it takes a second argument
// background default is false
// so we have to set background to true
// and it's created immediately
> db.ratings.createIndex({age: 1}, {background: true})

// it happened in the background without locking the collection
