-------------------------Working With Numeric Data--------------------

// numeric data is most important in scientific calculation
// Number more complex than any other
// 3 types of number in mongoDB.(Integers,Longs,Doubles)

Integers(int32) -->
 1. Only full Numbers(+- 2^32).
 2. Use for 'normal' Integers

Longs(int64) -->
 1. Only full Numbers(+- 2^64).
 2. Use for large Integers

Doubles(64bit) -->
 1. Numbers with Decimal Places(Decimal values are approximated). 2. Use for floats where high precision is not required

High Precision Doubles(128bit) -->
 1. Numbers with Decimal Places(Decimal values are stored with high precision(34 decimal digits)).
 2. Use for floats where high precision is required


// in mongoDB driver is a javaScript based driver.
// all numeric values stored as a double

> use numeric
switched to db numeric
> db.persons.insertOne({name: 'Max', age: 29})
> db.persons().find()

----------------WOrking with Int32--------------------

// here can see the size
> db.persons.stats()
"size" : 49,
"count" : 1,
> db.persons.deleteMany({})

// here can see that size is decrease
> db.persons.insertOne({ age: 29})
> db.persons.stats()
"size" : 35,
"count" : 1,
> db.persons.deleteMany({})

// here also can see that size now also more decrease
> db.persons.insertOne({ age: NumberInt(29)})
> db.persons.insertOne({ age: NumberInt("29")})
"size" : 31,
"count" : 1,

-----------------Working with Int64--------------------

// here can the output is a wrong value
> db.companies.insertOne({valuation: NumberInt('50000000000')})
> db.companies.findOne()
{ "_id" : ObjectId("5f3e81e7d0209e4d3a0ec072"), "valuation" : -1539607552

// if decrease one value then it works
> db.companies.insertOne({valuation: NumberInt('5000000000')})

// but if the data stored as a 64 bit double then it works
> db.companies.insertOne({valuation: 50000000000'})

> db.companies.find()
{ "_id" : ObjectId("5f3e81e7d0209e4d3a0ec072"), "valuation" : -1539607552 }
{ "_id" : ObjectId("5f3e8635d0209e4d3a0ec073"), "valuation" : 50000000000 }
{ "_id" : ObjectId("5f3e866cd0209e4d3a0ec074"), "valuation" : 705032704 }

// to store biggest possible number as Integers
// always have to use quotation marks
// basically it works as a string
> db.companies.insertOne({valuation: NumberLong('50000000000')})
> db.companies.find()
{ "_id" : ObjectId("5f3e81e7d0209e4d3a0ec072"), "valuation" : -1539607552 }
{ "_id" : ObjectId("5f3e8635d0209e4d3a0ec073"), "valuation" : 50000000000 }
{ "_id" : ObjectId("5f3e866cd0209e4d3a0ec074"), "valuation" : 705032704 }
{ "_id" : ObjectId("5f3e86ecd0209e4d3a0ec075"), "valuation" : NumberLong("50000000000") }

----------------Doing Maths with Floats Int32 Int64--------------

> db.accounts.insertOne(name: 'Max', amount: '34234253458373534574524524')
// add a small number
> db.accounts.insertOne(name: 'Max', amount: '10')

// $inc or any math calculation does not work with string value
> db.accounts.updateOne({}, {$inc: {amount: 10}})

// have to insert a Integers value
> db.accounts.deleteMany()
> db.accounts.insertOne(name: 'Max', amount: NumberInt('10'))

// here 10 as a double value mongoDB convert the sum as double
> db.accounts.updateOne({}, {$inc: {amount: 10}})

// if update the number with wrapping with NumberInt then the final output be a int
> db.accounts.updateOne({}, {$inc: {amount: NumberInt('10')}})

// let delete the document

> db.companies.deleteMany({})

// insert a large number
> db.companies.insertOne({valuation: NumberLong('34234253458373534574524524')})

// to calculate math operation with the large number NumberLong should be include in that number
// this is incorrect
> db.companies.updateOne({}, {$inc: {valuation: 1}})
// this is correct
> db.companies.updateOne({}, {$inc: {valuation: NumberLong('1')}})

----------------What's Wrong With Normal Doubles------------------

> db.science.insertOne({a: 0.3, b: 0.1})

> db.science.findOne()

// let execute maths calculation
> db.science.aggregate([{$project: {result: {$subtract: ['$a', '$b']}}}])

// here should be the subtract value is 0.2
// but it's come
{ "_id" : ObjectId("5f3e9ec9d0209e4d3a0ec079"), "result" : 0.19999999999999998 }

// so have to fix the issue

-------------------Working With Decimal 128bit-----------------------

// to get the exact subtract value, have to use NumberDecimal constructor

> db.companies.deleteMany({})
> db.science.insertOne({a: NumberDecimal("0.3"), b: NumberDecimal("0.1")})

> db.science.find().pretty()
{
	"_id" : ObjectId("5f3ea3ced0209e4d3a0ec07b"),
	"a" : NumberDecimal("0.3"),
	"b" : NumberDecimal("0.1")
}

// now getting the exact value
> db.science.aggregate([{$project: {result: {$subtract: ['$a', '$b']}}}])
{ "_id" : ObjectId("5f3ea3ced0209e4d3a0ec07b"), "result" : NumberDecimal("0.2") }

// let execute another query
> db.science.updateOne({}, {$inc: {a: 0.1}})

> db.science.updateOne({}, {$inc: {a: 0.1}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.science.find().pretty()
{
	"_id" : ObjectId("5f3ea3ced0209e4d3a0ec07b"),
	"a" : NumberDecimal("0.400000000000000"),
	"b" : NumberDecimal("0.1")
}

// so to get the right value
> db.science.updateOne({}, {$inc: {a: NumberDecimal("0.1")}})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.science.find().pretty()
{
	"_id" : ObjectId("5f3ea3ced0209e4d3a0ec07b"),
	"a" : NumberDecimal("0.500000000000000"),
	"b" : NumberDecimal("0.1")
}

// NumberDecimal means getting high precision decimal

> db.number.insertOne({num: 0.1})
> db.number.stats()
"size" : 33

> db.number.deleteMany({})

> db.number.insertOne({num: NumberDecimal("0.1")})
> db.number.stats()
"size" : 41
