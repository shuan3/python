>>> Users & Roles <<<

1. MongoDb uses a Role Based Access Control approach.
2. You create users on database and then log in with credentials(against those database).
3. Users have no rights by default, need to add roles to allow certain operations.
4. Permission that are granted by roles ('Privileges') are only granted for the database the user was added to unless explicitly grant access to other database.
5. Can use 'AnyDatabase' roles for cross-database access.

>>> Encryption <<<

1. Can encrypt data during transportation and at rest.

2. During transportation, can use TLS/SSL to encrypt data.

3. For production, should use SSL certificates issues by a certificate authority (NOT self-signed certificates)

4. For encryption at rest, can encrypt both the files that holdes data (made simple with "MongoDb Enterprise") and the values inside documents.


---------------Security CheckList-------------------

1. Authentication $ Authorization
2. Transport Encryption
3. Encryption st Rest
// this three facts is important for a database admin
4. Auditing
5. Server $ Network Config and Setup
6. Backups & Software Updates

---------------Authentication $ Authorization---------------

Authorization : Identifies valid users of the database
Authorization : Identifies what these users may actually do in the database

--------------Role Based Access Control----------------

MongoDb Server
--------------
(Auth Enabled)

Shop database :
      1. Products Collection
      2. Customers Collection
Blog database
      1. Posts Collection
      2. Authors Collection
Admin database

Why Rules
Different Types of Database users

Administrator
1. Needs to be able to manage the database config, create users etc.
2. Does not need to be able to insert or fetch data.

Developers / Your App
1. Needs to be able to insert, Updates, delete or fetch data(CRUD).
2. Does not need to be able to create users or manage the database config.

Data Scientist
1. Needs to be able to fetch data.
2. Does not need to be able to create users, manage the database config or insert, edit or delete data.

-------------------Creating $ Editing Users---------------

createUser(), UpdateUser() --> ('name': 'Max') --> (Roles and Privileges) --> Database (e.g admin) --> Access is not limited to authentication database

// this does not work
> mongo -u max -p 123456

// this is a grant user
> use admin
switched to db admin
> db.createUser({user: 'Mijanur', pwd: '123456', roles: ['userAdminAnyDatabase']})

// let authenticate as admin
> db.auth('Mijanur', '123456')

-------------------------Built-in-Roles------------------------

1. Database User --> read, readWrite

2. Database Admin --> dbAdmin ,userAdmin, dbOwner

3. All Database Roles --> readAnyDatabase, readWriteAnyDatabase, userAdminAnyDatabase, dbAdminAnyDatabase

4. Cluster Admin --> clusterManager, clusterMonitor, hostManager, clusterAdmin

5. Backup/Restore --> backup, restore

6. Superuser --> dbOwner (admin), userAdmin(admin), userAdminAnyDatabase, root

// to logout

------------------Assigning Roles to Users Database--------------

// let go to the database

> mongo --help

> mongo -u Mijanur -p 123456 --authenticationDatabase admin
// now logged in

// Assigning roles to the sub-admin(access permission to any single database)
> use shop
switched to db shop
> db.createUser({user: 'Mijanur1', pwd: '123456', roles: ['readWrite']})

// let authenticate the user
> mongo -u Mijanur1 -p 123456 --authenticationDatabase shop

> use shop
> db.products.insertOne({name: 'book'})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f3f747a8f6d2a27804cd909")
}

------------------Updating Extending Roles to Other Database-----------
// every time when try to log in then have to switch the db

// here basically readWrite replace
> db.updateUser('Mijanur1', {roles: ['readWrite', {role: 'readWrite', db: 'blog'}]})

// so first have to be admin
> db.logout()
> use admin
switched to db admin
> db.auth('Mijanur', '123456')

> use shop
> db.updateUser('Mijanur1', {roles: ['readWrite', {role: 'readWrite', db: 'blog'}]})

// can see the which database permission have
> db.getUser('Mijanur1')

> db.getUser('Mijanur1')
{
	"_id" : "shop.Mijanur1",
	"userId" : UUID("b0abc10a-dba1-4609-aec7-f9714c046505"),
	"user" : "Mijanur1",
	"db" : "shop",
	"roles" : [
		{
			"role" : "readWrite",
			"db" : "shop"
		},
		{
			"role" : "readWrite",
			"db" : "blog"
		}
	],
	"mechanisms" : [
		"SCRAM-SHA-1",
		"SCRAM-SHA-256"
	]
}

// now first login the database
mongo -u Mijanur1 -p 123456 --authenticationDatabase shop

> use blog
switched to db blog
> db.posts.insertOne({title: 'This works'})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f3f7ad50d7fd790369f97ea")
}

-------------------Transport Encryption---------------------

## Client(app <=> MongoDb Driver --- Encrypted--)--> MongoDb Server

// in this part have an issue for the MongoDb version 4.0 with my tutorial

// there are couple of commands

1. openssl genrsa -out mongodb-test-ca.key 4096
2. openssl req -new -x509 -days 1826 -key mongodb-test-ca.key -out mongodb-test-ca.crt -config openssl-test-ca.cnf
3. openssl genrsa -out mongodb-test-ia.key 4096
sudo mongod --tlsMode requireTLS --tlsCertificateKeyFile test-ca.pem
4. openssl x509 -sha256 -req -days 730 -in mongodb-test-ia.csr -CA mongodb-test-ca.crt -CAkey mongodb-test-ca.key -set_serial 01 -out mongodb-test-ia.crt -extfile openssl-test-ca.cnf -extensions v3_ca
5. cat mongodb-test-ca.crt mongodb-test-ia.crt  > test-ca.pem

// to execute the database(command does not work properly)
sudo mongod --tlsMode requireTLS --tlsCertificateKeyFile test-ca.pem
mongo --tls --tlsCAFile test-ca.pem --host localhost
-------------------Encryption at Rest-------------------

// can encrypt full storage. this is for enterprise MongoDb

// Common Name -->  have to use web server address but if work into a localhost just write localhost

// or getting an error

>> Storage << (Encrypted)
{
  email: 'test1@test.com',
  password: 'ad50rr4fdf84bfsdbsd44' <--- Encrypted/Hashed
}

{
  email: 'test2@test.com',
  password: 'a5ymb7fdf47fbryfvsfff'
}
