
---------------------Eliminating Duplicate Values-----------------

// but can see that have some duplicate values
// instead of $push have to use $addToSet
// $addToSet pushes but avoid duplicating element.

db.friends.aggregate([
    {
        $unwind: '$hobbies'
    },
    {
        $group: {
            _id: {
                age: '$age'
            },
            allHobbies: {
                $addToSet: '$hobbies'
            }
        }
    }
]).pretty()
{
	"_id" : {
		"age" : 29
	},
	"allHobbies" : [
		"Skiing",
		"Sports",
		"Cooking"
	]
}
{
	"_id" : {
		"age" : 30
	},
	"allHobbies" : [
		"Eating",
		"Data Analytics"
	]
}

--------------Using projection with Arrays---------------------

// want to print first document from examScores arrays

// 1 --> means first element from first and length 1
> db.friends.aggregate([
    {
        $project: {
            _id: 0,
            examScore: {
                $slice: ['$examScores', 1]
            }
        }
    }
]).pretty()
{ "examScore" : [ { "difficulty" : 4, "score" : 57.9 } ] }
{ "examScore" : [ { "difficulty" : 7, "score" : 52.1 } ] }
{ "examScore" : [ { "difficulty" : 3, "score" : 75.1 } ] }

> db.friends.aggregate([
    {
        $project: {
            _id: 0,
            examScore: {
                $slice: ['$examScores', 2]
            }
        }
    }
]).pretty()

// -1 means last

> db.friends.aggregate([
    {
        $project: {
            _id: 0,
            examScore: {
                $slice: ['$examScores', -1]
            }
        }
    }
]).pretty()
{ "examScore" : [ { "difficulty" : 3, "score" : 88.5 } ] }
{ "examScore" : [ { "difficulty" : 5, "score" : 53.1 } ] }
{ "examScore" : [ { "difficulty" : 6, "score" : 61.5 } ] }

// last two scores
> db.friends.aggregate([
    {
        $project: {
            _id: 0,
            examScore: {
                $slice: ['$examScores', -2]
            }
        }
    }
]).pretty()

// start at position two and give one element
> db.friends.aggregate([
    {
        $project: {
            _id: 0,
            examScore: {
                $slice: ['$examScores', 2, 1]
            }
        }
    }
]).pretty()

-------------------Getting the length of and array--------------------

// $size calculate the length of an array

> db.friends.aggregate([
    {
        $project: {
            _id: 0,
            numScores: {
                $size: '$examScores'
            }
        }
    }
]).pretty()



---------------------Using the Filter Operator-----------------

// $filter Operator allows to filter out certain elements an array and only return the data according to condition
// filter score so the greater than 60
// here sc is a temporary variable for using condition
// sc is a temporary variable of examScores but filter function executes over and over again all fields
// so have to use two dollar sign
// $cond --> condition

db.friends.aggregate([
    {
        $project: {
            _id: 0,
            scores: {
                $filter: {
                    input: '$examScores',
                    as: 'sc',
                    cond: {
                        $gt: ['$$sc.score', 60]
                    }
                }
            }
        }
    }
]).pretty()
{
	"scores" : [
		{
			"difficulty" : 6,
			"score" : 62.1
		},
		{
			"difficulty" : 3,
			"score" : 88.5
		}
	]
}
{ "scores" : [ { "difficulty" : 2, "score" : 74.3 } ] }
{
	"scores" : [
		{
			"difficulty" : 3,
			"score" : 75.1
		},
		{
			"difficulty" : 6,
			"score" : 61.5
		}
	]


-------------------Applying Multiple Operations to our Array---------------

wanted to transform our friend objects such that only output the highest exam score

> db.friends.aggregate([
    { $unwind: '$examScores' },
    { $sort: { 'examScores.score': -1 } }
]).pretty()

// can do same thing by projection

> db.friends.aggregate([
    { $unwind: '$examScores' },
    { $project: { _id: 1, name: 1, age: 1, score: '$examScores.score'}},
    { $sort: { score: -1 } },
    { $group: { _id: '$_id', maxScore: {$max: '$score'}}}
]).pretty()

// group by id but can also add anything
// if can group by name, it is bad choice. cause name can be duplicate
> db.friends.aggregate([
    { $unwind: '$examScores' },
    { $project: { _id: 1, name: 1, age: 1, score: '$examScores.score' } },
    { $group: { _id: '$_id', maxScore: { $max: '$score' } } }
]).pretty()

{ "_id" : ObjectId("5f318bb939e723820551436e"), "maxScore" : 74.3 }
{ "_id" : ObjectId("5f318bb939e723820551436f"), "maxScore" : 75.1 }
{ "_id" : ObjectId("5f318bb939e723820551436d"), "maxScore" : 88.5 }

// show the name and sort with descending order
// use the first value encounter

// $first -->means want to get the name value
> db.friends.aggregate([
    { $unwind: '$examScores' },
    { $project: { _id: 1, name: 1, age: 1, score: '$examScores.score' } },
    { $group: { _id: '$_id', name: { $first: '$name' }, maxScore: { $max: '$score' } } },
    { $sort: { maxScore: -1 } }
]).pretty()


{
	"_id" : ObjectId("5f318bb939e723820551436d"),
	"name" : "Max",
	"maxScore" : 88.5
}
{
	"_id" : ObjectId("5f318bb939e723820551436f"),
	"name" : "Maria",
	"maxScore" : 75.1
}
{
	"_id" : ObjectId("5f318bb939e723820551436e"),
	"name" : "Manu",
	"maxScore" : 74.3
}

> db.friends.aggregate([
    { $unwind: '$examScores' },
    { $project: { _id: 1, name: 1, age: 1, score: '$examScores.score' } },
    { $group: { _id: '$_id', name: { $first: '$name' }, age: { $first: '$age' }, maxScore: { $max: '$score' } } },
    { $sort: { maxScore: -1 } }
]).pretty()
