---------------------Aggregation Framework------------------------

// Retrieving Data Efficiently and In a Structured way

What is aggregation Framework
// pipeline stages
Steps for find (follow top to down)
                  Collection
                      |              /
                  { $match }        /
                      |            /    Every stage receives
                  { $sort }       /     the output of the
                      |           \     Previous stage
                  { $group }       \
                      |             \
                  { $project }       \
                      |
          Output (List of Documents)

----------------Short Description ---------------

// Stages and Operations
1. There are plenty of available stages and operations can choose from
2. Stages define the different steps of and data is funneled through
3. Each stage receives the output of the last stage as input
4. Operations can be used inside of stages to transform, limit or re-calculated data.

// Important Stages
1. The most important stages are $match, $group, $project, $sort and $unwind etc.
2. Whilst there are some common behaviors between find() filters + projection and $match + $project, the aggregation stages are more flexible.


mongoimport persons.json -d analytics -c persons --jsonArray
> use analytics
> db.persons.findOne()

// The aggregate method takes an array and it takes an array cause have to define a series of steps inside array.

> db.persons.aggregate([
... { $match: {gender: 'female'} }
... ]).pretty()

----------------Understanding the Group Stage--------------------

// group --> group stage allows to group data by a certain fields or by multiple fields
// have to add $ sign before selected query document
// here accumulate by 1 --> increasing value -1 -> decreasing value
// totalPersons is the value that how many person are into same state
// _id is unique value
// can not use group into find() method
// "$location.state" --> means iterating every element

db.persons.aggregate([
    { $match: { gender: 'female' } },
    { $group: { _id: { state: "$location.state" }, totalPersons: { $sum: 1}}}
]).pretty()

// this is group stage in action
// here we get the data with unsorted order
// can also be sorted

{ "_id" : { "state" : "berkshire" }, "totalPersons" : 1 }
{ "_id" : { "state" : "michigan" }, "totalPersons" : 1 }
{ "_id" : { "state" : "county down" }, "totalPersons" : 1 }
{ "_id" : { "state" : "loiret" }, "totalPersons" : 1 }
{ "_id" : { "state" : "cornwall" }, "totalPersons" : 2 }
{ "_id" : { "state" : "sivas" }, "totalPersons" : 1 }
{ "_id" : { "state" : "uşak" }, "totalPersons" : 1 }
{ "_id" : { "state" : "sinop" }, "totalPersons" : 3 }
{ "_id" : { "state" : "marne" }, "totalPersons" : 1 }
{ "_id" : { "state" : "northumberland" }, "totalPersons" : 1 }
{ "_id" : { "state" : "leicestershire" }, "totalPersons" : 1 }
{ "_id" : { "state" : "puy-de-dôme" }, "totalPersons" : 1 }
{ "_id" : { "state" : "maryland" }, "totalPersons" : 1 }
{ "_id" : { "state" : "ardèche" }, "totalPersons" : 1 }
{ "_id" : { "state" : "ankara" }, "totalPersons" : 3 }
{ "_id" : { "state" : "dordogne" }, "totalPersons" : 1 }
{ "_id" : { "state" : "antalya" }, "totalPersons" : 1 }
{ "_id" : { "state" : "corrèze" }, "totalPersons" : 1 }
{ "_id" : { "state" : "ardennes" }, "totalPersons" : 1 }
{ "_id" : { "state" : "bas-rhin" }, "totalPersons" : 2 }
Type "it" for more


// to check aggregation function work correctly
> db.persons.find({'location.state': 'sinop', gender: 'female'}).count()
3

// let also sort the group stage values according to totalPersons when execute query
// sorting done from to previous stage
> db.persons.aggregate([     { $match: { gender: 'female' } },     { $group: { _id: { state: "$location.state" }, totalPersons: { $sum: 1 } } },     { $sort: { totalPersons: -1 } } ]).pretty()
{ "_id" : { "state" : "midtjylland" }, "totalPersons" : 33 }
{ "_id" : { "state" : "nordjylland" }, "totalPersons" : 27 }
{ "_id" : { "state" : "new south wales" }, "totalPersons" : 24 }
{
	"_id" : {
		"state" : "australian capital territory"
	},
	"totalPersons" : 24
}
{ "_id" : { "state" : "syddanmark" }, "totalPersons" : 24 }
{ "_id" : { "state" : "south australia" }, "totalPersons" : 22 }
{ "_id" : { "state" : "hovedstaden" }, "totalPersons" : 21 }
{ "_id" : { "state" : "danmark" }, "totalPersons" : 21 }
{ "_id" : { "state" : "queensland" }, "totalPersons" : 20 }
{ "_id" : { "state" : "overijssel" }, "totalPersons" : 20 }
{ "_id" : { "state" : "sjælland" }, "totalPersons" : 19 }
{ "_id" : { "state" : "nova scotia" }, "totalPersons" : 17 }
{ "_id" : { "state" : "canterbury" }, "totalPersons" : 16 }
{ "_id" : { "state" : "northwest territories" }, "totalPersons" : 16 }
{ "_id" : { "state" : "gelderland" }, "totalPersons" : 16 }
{ "_id" : { "state" : "yukon" }, "totalPersons" : 16 }
{ "_id" : { "state" : "bayern" }, "totalPersons" : 15 }
{ "_id" : { "state" : "northern territory" }, "totalPersons" : 15 }
{ "_id" : { "state" : "tasmania" }, "totalPersons" : 15 }
{ "_id" : { "state" : "noord-brabant" }, "totalPersons" : 14 }
Type "it" for more

// check if answer is correctly
> db.persons.find({'location.state': 'midtjylland', gender: 'female'}).count()
33

----------------- Working with Project Stage ---------------------

// project works in the same way as the projection works in the find method
"gender" : "male",
	"name" : {
		"title" : "mr",
		"first" : "harvey",
		"last" : "chambers"
	},
// full list to all
// want to convert name into one document
// project does not group multiple documents together, its just transform every single document

> db.persons.aggregate([
    { $project: { _id: 0, gender: 1, fullName: { $concat: ['$name.first', ' ','$name.last'] } } }
]).pretty()

// now want to first and last name start with Uppercase letter
> db.persons.aggregate([
    {
        $project: {
            _id: 0,
            gender: 1,
            fullName: {
                $concat: [{ $toUpper: '$name.first'}, ' ', { $toUpper: '$name.last'}]
            }
        }
    }
]).pretty()

// $substrCP --> substring part
// 0 -> means starting index
// 1 -> means how much character(length)
> db.persons.aggregate([
    {
        $project: {
            _id: 0,
            gender: 1,
            fullName: {
                $concat: [
                    { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
                    ' ',
                    { $toUpper: { $substrCP: ['$name.last', 0, 1] } }
                ]
            }
        }
    }
]).pretty()

// the final output
> db.persons.aggregate([
    {
        $project: {
            _id: 0,
            gender: 1,
            fullName: {
                $concat: [
                    { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
                    { $substrCP: ['$name.first', 1, { $subtract: [{ $strLenCP: '$name.first' }, 1] }] },
                    ' ',
                    { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
                    { $substrCP: ['$name.last', 1, { $subtract: [{ $strLenCP: '$name.last' }, 1] }] },
                ]
            }
        }
    }
]).pretty()
