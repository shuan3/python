
--------------------Understanding bucket-------------------

// let's prepare a bucket stage
// using bucket can create a different categories and filter

// boundaries means range/levels like 0-18, 18-30,30-50, 50-80, 80-120
// in every range first value execute not last value, 18-30 --> means with 18 but not exist 30
> db.persons.aggregate([
    {
        $bucket: {
            groupBy: '$dob.age',
            boundaries: [0, 18, 30, 50, 80, 120],
            output: {
                numPersons: { $sum: 1 },
                average: { $avg: '$dob.age' },
            }
        }
    }
]).pretty()

// here we get the three bucket
{ "_id" : 18, "numPersons" : 868, "average" : 25.101382488479263 }
{ "_id" : 30, "numPersons" : 1828, "average" : 39.4917943107221 }
{ "_id" : 50, "numPersons" : 2304, "average" : 61.46440972222222 }

> db.persons.find({'dob.age': {$gt: 17, $lt: 30}}).count()
868

> db.persons.find({'dob.age': {$gt: 49, $lt: 80}}).count()
2304

> db.persons.find({'dob.age': {$gt: 29, $lt: 50}}).count()
1828


// checking the validation
// no data
> db.persons.find({'dob.age': {$lt: 18}})
> db.persons.find({'dob.age': {$gt: 80}})
> db.persons.find({'dob.age': 80})

// adding more levels

> db.persons.aggregate([
    {
        $bucket: {
            groupBy: '$dob.age',
            boundaries: [18, 30, 40, 50, 60, 120],
            output: {
                numPersons: { $sum: 1 },
                average: { $avg: '$dob.age' },
            }
        }
    }
]).pretty()

// can also create a auto bucket by defining how many buckets want
// almost have equal distributions

> db.persons.aggregate([
    {
        $bucketAuto: {
            groupBy: '$dob.age',
            buckets: 5,
            output: {
                numPersons: { $sum: 1 },
                average: { $avg: '$dob.age' },
            }
        }
    }
]).pretty()

{
	"_id" : {
		"min" : 21,
		"max" : 32
	},
	"numPersons" : 1042,
	"average" : 25.99616122840691
}
{
	"_id" : {
		"min" : 32,
		"max" : 43
	},
	"numPersons" : 1010,
	"average" : 36.97722772277228
}
{
	"_id" : {
		"min" : 43,
		"max" : 54
	},
	"numPersons" : 1033,
	"average" : 47.98838334946757
}
{
	"_id" : {
		"min" : 54,
		"max" : 65
	},
	"numPersons" : 1064,
	"average" : 58.99342105263158
}
{
	"_id" : {
		"min" : 65,
		"max" : 74
	},
	"numPersons" : 851,
	"average" : 69.11515863689776
}

------------------Diving into Additional Stages------------------

// want to find the 10 users, the 10 persons with the oldest birth date, so the lowest birth date

> db.persons.aggregate([
    {
        $project: {
            _id: 0,
            name: 1,
            birthDate: {
                $toDate: '$dob.date'
            }
        }
    }
]).pretty()

> db.persons.aggregate([
    { $project: { _id: 0, name: 1, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $limit: 10 }
]).pretty()

// adding some extra
> db.persons.aggregate([
    { $project: { _id: 0, name: {$concat:['$name.first', ' ', '$name.last']}, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $limit: 10 }
]).pretty()

// skip first 10
> db.persons.aggregate([
    { $project: { _id: 0, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $skip: 10},
    { $limit: 10 }
]).pretty()

// but after $skip into $limit it does not work
> db.persons.aggregate([
    { $project: { _id: 0, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $limit: 10 },
    { $skip: 10 }
]).pretty()

// if add sort into last can see the different result
> db.persons.aggregate([
    { $project: { _id: 0, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $limit: 10 },
    { $skip: 10 },
    { $sort: { birthDate: 1 } },
]).pretty()

// same also for $match
> db.persons.aggregate([
    { $match: { gender: 'male' } },
    { $project: { _id: 0, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $skip: 10 },
    { $limit: 10 },
    { $sort: { birthDate: 1 } }
]).pretty()

// if $match add after the project without projection,we do not get any result
> db.persons.aggregate([
    { $project: { _id: 0, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $match: { gender: 'male' } },
    { $skip: 10 },
    { $limit: 10 },
]).pretty()

// if gender add into projection phase then will get results
> db.persons.aggregate([
    { $project: { _id: 0, gender: 1, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $match: { gender: 'male' } },
    { $skip: 10 },
    { $limit: 10 },
]).pretty()

// but best is, use $match before $project
> db.persons.aggregate([
    { $match: { gender: 'male' } },
    { $project: { _id: 0, gender: 1, name: { $concat: ['$name.first', ' ', '$name.last'] }, birthDate: { $toDate: '$dob.date' } } },
    { $sort: { birthDate: 1 } },
    { $skip: 10 },
    { $limit: 10 },
]).pretty()

-----------------Writing Pipeline Results Into a New Collection-----------

// by getting the output we can store into the another Collection
// can do work with the out stage
db.persons.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      email: 1,
      birthdate: { $toDate: '$dob.date' },
      age: "$dob.age",
      location: {
        type: 'Point',
        coordinates: [
          {
            $convert: {
              input: '$location.coordinates.longitude',
              to: 'double',
              onError: 0.0,
              onNull: 0.0
            }
          },
          {
            $convert: {
              input: '$location.coordinates.latitude',
              to: 'double',
              onError: 0.0,
              onNull: 0.0
            }
          }
        ]
      }
    }
  },
  {
    $project: {
      gender: 1,
      email: 1,
      location: 1,
      birthdate: 1,
      age: 1,
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] }
            ]
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.last' }, 1] }
            ]
          }
        ]
      }
    }
  },
  { $out: "transformedPersons" }
]).pretty();

-----------------Working with the geoNear Stage------------------

// first create an index into the transformedPersons Collection

> db.transformedPersons.createIndex({location: '2dsphere'})
// create geo location aggregation pipeline stages

// have to specify and that is the distance field, because geoNear will actually also give us back the distance that is calculated between our point and the document

// geoNear, it has to be the first element in the pipeline because it needs to use that index and the first pipeline element is the only element with direct access to the collection, other pipeline stages just get the output of the previous pipeline stage, this is the only element with direct access to the collection.

// also can add query
> db.transformedPersons.aggregate([
    {
        $geoNear: {
            near: {
                type: 'Point',
                coordinates: [-18.4, -42.8]
            },
            maxDistance: 1000000,
            $limit: 10,
            query: { age: { $gt: 30 } },
            distanceField: 'distance'
        }
    }
]).pretty()

// can also add multiple pipeline stages
db.transformedPersons.aggregate([
    {
        $geoNear: {
            near: {
                type: 'Point',
                coordinates: [-18.4, -42.8]
            },
            maxDistance: 1000000,
            $limit: 10,
            query: { age: { $gt: 30 } },
            distanceField: 'distance'
        }
    },
    { $project: { _id: 1, email: 0, birthdate: 0 } },
    { $sort: { distanceField: 1 } },
]).pretty()
