------------------Transactions----------------------

                User deletes Accounts
    Users Collection              Posts Collection
--------------------------------------------------------
|   { User Document } -----------> { Post Document }   |
|                     \                                |
|             related  \                               |
|                       \--------> { Post Document }   |
|  Should be deleted together                          |
---------------------------------------------------------

// always have to change ip address into mongoDB cloud cluster

// first have access the mongoDB cloud
mongo "mongodb+srv://mytestingcluster.n7v1t.mongodb.net/<test1>" --username mijanur

> use blog
> db.users.insertOne({name: 'Max'})
> db.posts.insertMany([{title: 'A js post', views: 23, userId: ObjectId("5f4163d6526c4846e4c6fe1b")}, {title: 'Group discussion', views: 2, userId: ObjectId("5f4163d6526c4846e4c6fe1b")}])

// have to execute the mongo session to work with the Transactions

> const session = db.getMongo().startSession()
> session.startTransaction()

> const usersCol = session.getDatabase('blog').users
> const postsCol = session.getDatabase('blog').posts

// this is basically remove from session
> usersCol.deleteOne({_id: ObjectId("5f4163d6526c4846e4c6fe1b")})

// this command also successfully execute(this comes from cloud not session), but we deleted the user before
> postsCol.deleteMany({userId: ObjectId("5f4163d6526c4846e4c6fe1b")})

MongoDB Enterprise atlas-9fuf07-shard-0:PRIMARY> usersCol.deleteOne({_id: ObjectId("5f4163d6526c4846e4c6fe1b")})
{ "acknowledged" : true, "deletedCount" : 1 }

// it basically deleted from cache but not from real server
> db.users.find().pretty()
{ "_id" : ObjectId("5f4163d6526c4846e4c6fe1b"), "name" : "Max" }

// to execute fully delete from cloud have to commit Transactions
> session.commitTransaction()

// now deleted from cloud
> db.users.find().pretty()

// can also abort --> all things are trying to fully delete

// so these actions either succeed together or they fail together. That is the idea behind the transactions.

// this is basically comes from atomicity
// get an atomicity in operation level not just on a document level
// so need cross operation consistency
