## Performance & Fault Tolerancy

1. Consider Capped Collections for cases where want to clear old data automatically.

2. Performance is all about having efficient queries / operations, fitting data formats and a best-practice MongoDB server config.

3. Replica sets provide fault tolerancy (with automatic recovery) and improved read performance.

4. Sharding allows to scale MongoDB server horizontally.

## Deployment $ MongoDB Atlas

1. Deployment is a complex matter since it involves many tasks - some of them are not even directly related to MongoDB.

2. Unless are a experienced admin (or got one), should consider a managed solution like MongoDB Atlas.

3. Atlas is a managed service where can configure a MongoDB environment and pay at a by-usage basis.


---------------What influences Performance------------

Developer/ Db Admin

1. Efficient Queries/Operations
2. Indexes
3. Fitting Data Schema

DB Admin/ System Admin

1. Hardware & Network
2. Sharding
3. Replica Sets

--------------- Understanding Capped Collections--------------

// capped collections --> are a special type of collection which have to create explicitly where limit the amount of data and old data is automatically deleted when uploads new data if memory or data limit is exceeded.

// oldest data is automatically deleted when new data comes in.

// let create a collection with capped
// max is optional

> use performance
> db.createCollection('capped', {capped: true, size: 10000, max: 3})

// access capped collections
>  db.capped.insertOne({name: 'Max'})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f4023af6843257ac35a9e41")
}
> db.capped.insertOne({name: 'Manu'})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f4023b86843257ac35a9e42")
}
> db.capped.insertOne({name: 'Anna'})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f4023c06843257ac35a9e43")
}

> db.capped.find().pretty()
// here always the order is same that data is inserted into collections, but in normal collections can be different
// ascending order
{ "_id" : ObjectId("5f4023af6843257ac35a9e41"), "name" : "Max" }
{ "_id" : ObjectId("5f4023b86843257ac35a9e42"), "name" : "Manu" }
{ "_id" : ObjectId("5f4023c06843257ac35a9e43"), "name" : "Anna" }

// if any time need to order the documents to descending order
> db.capped.find().sort({$natural: -1}).pretty()

// if now insert an new document then the first document automatically deleted(name: 'Max')
> db.capped.insertOne({name: 'Maria'})

// but the data is nor permanently deleted
, If by using Cache the can retrieve the full data

------------------Replica Sets-----------------

Client(shell , Driver) <--Read-->  MongoDB Server Primary Node --> Replica Set(Primary Node --> 1. Secondary Node 2. Secondary Node

// If Primary node goes offline then data read from ne Primary(Secondary Node)

Why Replica Sets?
1. Backup / Fault Tolerance 2. Improve Read Performance

// To read data as first as possible can over the Primary node and go tto the Secondary Node

-----------------Sharding (Horizontal Scaling)--------------

// more memory into a single machine.
// horizontal scaling which means need more servers.

                      MongoDB Server
					        |
	------------------------------------------------------
	server1	  server2  server3   server4  server5  server6

// That issue here of course is this might sound logical but service.
// Now don't duplicate that data.
// They are not backups.
// They split that data so server A The one on the left let's say storing data for the same application as the average service but a different chunk of it.
// data so that data is distributed across shards not replicated and queries.
// So queries where find data but also insert update and delete operations.

## Data is distributed (not replicated) across Shards
// each chunk manages it's data and it's range of data
## Queries are run across all Shards

// data can be stored as A-J, J-K, K-S.. to the sequence of chunk(server)

------------------How Sharding Works---------------------

								----------
								| Client |
								----------
									|
							------------------
							| mongos(Router) |
							------------------
									|
 -------------------------------------------------------------------------
        |                           |                         |
 MongoDB(Server/Shard)  	MongoDB(Server/Shard)     MongoDB(Server/Shard)
 --------------------------------------------------------------------------
     | Shard Key  |            | Shard Key  |             | Shard Key  |
 ---------------------------------------------------------------------------
 // shard key : shard key is essential just a field that's added to every document which kid of is important.

 ------------------------Queries and Sharding-------------------------

                             	----------
								| find() |
								----------
									 |
							 ------------------
						 	 | mongos(Router) |
							 ------------------
                                     |
		    -------------------------------------------------------
	        |                                                     |
 ---------------------------			            ---------------------------
 | Option1: Operation does |                        | Option2: Operation does |
 | not contain Shared Key  |                        | contain Shared Key      |
 ---------------------------                        ---------------------------
            |                                 Directly Send   ---> |
BroadCast >	|                                 to right Shard       |
            |                                                      |
--------------------------                               --------------------
shared    shared    shared                                       shared

// this is all about distributing data across servers and then setting up everything shared it can be required and used efficiently.

-------------------Deploying a MongoDB Server-------------------

localhost(mongod) -------> Atlas(mongod)

// have to manages
1. Manage Shards
2. Secure User / Auth Setup
3. Project Web Server / Network
4. Manage Replica Set
5. Encryption(Transportation & Rest)
6. Regular Backups
7. Update Software
