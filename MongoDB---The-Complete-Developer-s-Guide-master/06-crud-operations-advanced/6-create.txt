--------------------------CREATE-----------------------

insert() --> insert also exist one many document.But it's  not recommended to use it anymore - it also does not return the inserted id's

> use user
switched to db user
> db.persons.insert({name: 'Phil', age: 35})
WriteResult({ "nInserted" : 1 })
> db.persons.find()
{ "_id" : ObjectId("5f151e97e3242ab6a2f87b4e"), "name" : "Phil", "age" : 35 }
> db.persons.find().pretty()
{
	"_id" : ObjectId("5f151e97e3242ab6a2f87b4e"),
	"name" : "Phil",
	"age" : 35
}


> db.persons.insert([{name: 'Khil', age: 45},{name: 'RAJU', age: 22}])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})

> db.persons.find().pretty()
{
	"_id" : ObjectId("5f151e97e3242ab6a2f87b4e"),
	"name" : "Phil",
	"age" : 35
}
{
	"_id" : ObjectId("5f15209ae3242ab6a2f87b4f"),
	"name" : "Khil",
	"age" : 45
}
{
	"_id" : ObjectId("5f15209ae3242ab6a2f87b50"),
	"name" : "RAJU",
	"age" : 22
}


-----------------------working with order insert--------------------------------


1. By default, when using insertMany(), inserts are ordered, that means, that the inserting process stops if an error occurs.
2. Can changes this by switching to 'unordered inserts' - inserting process will then continue, even if errors occurred.
3. In both cases, no successful inserts (before the error) will be rolled back.
4. Successful insert will not roll back.

// bulk process



> db.hobbies.insertMany([{_id: 'sports', name: 'Sports'},{_id:'cooking',name:'Cooking'},{_id:'cars',name: 'Cars'}])
{
	"acknowledged" : true,
	"insertedIds" : [
		"sports",
		"cooking",
		"cars"
	]
}
> db.hobbies.find().pretty()
{ "_id" : "sports", "name" : "Sports" }
{ "_id" : "cooking", "name" : "Cooking" }
{ "_id" : "cars", "name" : "Cars" }

> db.hobbies.insertMany([{_id: 'yago', name: 'Yoga'},{_id:'cooking',name:'Cooking'}])
2020-07-20T11:19:04.791+0600 E QUERY    [thread1] BulkWriteError: write error at item 1 in bulk operation :
BulkWriteError({
	"writeErrors" : [
		{
			"index" : 1,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: user.hobbies index: _id_ dup key: { : \"cooking\" }",
			"op" : {
				"_id" : "cooking",
				"name" : "Cooking"
			}
		}
	],
	"writeConcernErrors" : [ ],
	"nInserted" : 1,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:369:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:333:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1177:1
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:314:5
@(shell):1:1

// every element is inserted and standalone but if an error creates then exact element and after are is exited.

> db.hobbies.find().pretty()
{ "_id" : "sports", "name" : "Sports" }
{ "_id" : "cooking", "name" : "Cooking" }
{ "_id" : "cars", "name" : "Cars" }
{ "_id" : "yago", "name" : "Yoga" }


> db.hobbies.insertMany([{_id: 'yago', name: 'Yoga'},{_id:'cooking',name:'Cooking'},{_id:'hiking',name:'Hiking'}],{ordered: true})
2020-07-20T11:33:12.922+0600 E QUERY    [thread1] BulkWriteError: write error at item 0 in bulk operation :
BulkWriteError({
	"writeErrors" : [
		{
			"index" : 0,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: user.hobbies index: _id_ dup key: { : \"yago\" }",
			"op" : {
				"_id" : "yago",
				"name" : "Yoga"
			}
		}
	],
	"writeConcernErrors" : [ ],
	"nInserted" : 0,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:369:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:333:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1177:1
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:314:5
@(shell):1:1

// now one element is inserted

> db.hobbies.insertMany([{_id: 'yago', name: 'Yoga'},{_id:'cooking',name:'Cooking'},{_id:'hiking',name:'Hiking'}],{ordered: false})
2020-07-20T11:33:46.532+0600 E QUERY    [thread1] BulkWriteError: 2 write errors in bulk operation :
BulkWriteError({
	"writeErrors" : [
		{
			"index" : 0,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: user.hobbies index: _id_ dup key: { : \"yago\" }",
			"op" : {
				"_id" : "yago",
				"name" : "Yoga"
			}
		},
		{
			"index" : 1,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: user.hobbies index: _id_ dup key: { : \"cooking\" }",
			"op" : {
				"_id" : "cooking",
				"name" : "Cooking"
			}
		}
	],
	"writeConcernErrors" : [ ],
	"nInserted" : 1,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:369:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:333:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1177:1
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:314:5
@(shell):1:1

> db.hobbies.find().pretty()
{ "_id" : "sports", "name" : "Sports" }
{ "_id" : "cooking", "name" : "Cooking" }
{ "_id" : "cars", "name" : "Cars" }
{ "_id" : "yago", "name" : "Yoga" }
{ "_id" : "hiking", "name" : "Hiking" }

-----------------------------Write concern--------------------

## Control the "level of guarantee"

client---> MongoDB Server ---> Storage Engine ---> 1. Memory 2.Data on Disk

e.g insertOne()| --> {w: 1, j: undefined}
               | --> {w: 1, j: true} --> greater security that this will happen
               |                         and succeed even if the server should face issues
               | --> {w: 1, wtimeout: 200, j: true} --> this simply means which time frame do you give your
                                                        server to report a success for this write before you
                                                        cancel it


w--> write -> write : 1 means should accepted to write
## In write the number means how many instances you want this write to be acknowledged. With 1 is the default. So the storage engine is aware of it and will eventually write to the disk.

j--> Journal('Todos') --> the journal is an additional file which the storage engine manages is like a To-Do file. It works when if server is down for some reason then file is still there.If the restart the server or if it recovers basically.

## Backup todo list if server is down

> db.persons.insertOne({name: 'Chrissy', age: 44},{ writeConcern: {w: 0} })
{ "acknowledged" : false }

> db.persons.find()
{ "_id" : ObjectId("5f151e97e3242ab6a2f87b4e"), "name" : "Phil", "age" : 35 }
{ "_id" : ObjectId("5f15209ae3242ab6a2f87b4f"), "name" : "Khil", "age" : 45 }
{ "_id" : ObjectId("5f15209ae3242ab6a2f87b50"), "name" : "RAJU", "age" : 22 }
{ "_id" : ObjectId("5f154012e3242ab6a2f87b52"), "name" : "Chrissy", "age" : 44 }


// data is stored but acknowledged is false.You sent the request but you don't know if it reached the server.If any network connections issue create. W:0 is super fast but obviously, it tells you nothing about whether this succeed or not.

// write : the default is true

> db.persons.insertOne({name: 'Alex', age: 35},{writeConcern: {w: 1}})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f15415de3242ab6a2f87b53")
}
> db.persons.find()
{ "_id" : ObjectId("5f151e97e3242ab6a2f87b4e"), "name" : "Phil", "age" : 35 }
{ "_id" : ObjectId("5f15209ae3242ab6a2f87b4f"), "name" : "Khil", "age" : 45 }
{ "_id" : ObjectId("5f15209ae3242ab6a2f87b50"), "name" : "RAJU", "age" : 22 }
{ "_id" : ObjectId("5f154012e3242ab6a2f87b52"), "name" : "Chrissy", "age" : 44 }
{ "_id" : ObjectId("5f15415de3242ab6a2f87b53"), "name" : "Alex", "age" : 35 }

// journal : default is false or undefined

> db.persons.insertOne({name: 'Michel', age: 35},{writeConcern: {w: 1, j: false}})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f154215e3242ab6a2f87b54")
}

// if journal is true then it could be little bit slower

> db.persons.insertOne({name: 'Michela', age: 35},{writeConcern: {w: 1, j: true}})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f154255e3242ab6a2f87b55")
}

> db.persons.insertOne({name: 'Aliya', age: 35},{writeConcern: {w: 1, j: true,wtimeout: 200}})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f1542cee3242ab6a2f87b56")
}

// it super fast
// cause an issue if network connection is slow
> db.persons.insertOne({name: 'Aliya', age: 35},{writeConcern: {w: 1, j: true,wtimeout: 1}})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("5f154309e3242ab6a2f87b57")
}


--------------------------Atomicity-------------------------

1. Operation (e.g. insertOne()) --> Error --> Rolled Back(i.e NOTHING is saved)
2. Operation (e.g. insertOne()) --> Success --> Saved as Whole

## The Atomicity guarantees that an atomic transaction which means the transaction either succeeds as a whole or it fails as a whole.

## I it fails during the write, everything is rolled back for this document that are inserted.

## Its on a per document level, that means the top level document, it includes all embedded documents, all arrays so that is all included.

## MongoDB CRUD operation are Atomic on the Document Level(including Embedded Documents).

----------------------------------------------------------------------------------------

## If you use insert many with multiple documents being inserted, then you don't get this.

## If you have multiple documents in one operation, like insert many, the only each document on its own is guaranteed to either fail or succeed but not insert many.

## Here does not roll back if any occurs create in one document.

-------------------------Importing Data-------------------------

mongoimport tv-shows.json -d movieData -c movies --jsonArray --drop

--jsonArray -> to make the mongo import command aware of this.
--drop -> collection should already exist, it will dropped and then re-added otherwise it we'll append the data to the existing collection and that might also be what you want.
