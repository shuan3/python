--------------------------Update--------------------------

1. Document Updating Operator 2. Updating Fields 3. Updating Arrays

---------------------1. Document Updating Operator-----------------------

$min, $max, $mul, $inc, $set, $unset

// set basically changed or added new document

> use user
switched to db user

> db.users.find().pretty()

> db.users.updateOne({_id: ObjectId("5f17c3d47122dce4fa46fb4a")}, {$set: {hobbies:[{title: 'Sports', frequency: 5},{title: 'Cooking', frequency: 3}, {title: 'Hiking', frequency: 1}]}})

// $set basically add a new value or update existing value
// update the users whose hobby is Sports
> db.users.updateMany({'hobbies.title': 'Sports'}, {$set: {isSporty: true}})

// adding multiple elements using $set
> db.users.updateOne({_id: ObjectId("5f17c3d47122dce4fa46fb4a")}, {$set: {age: 40, phone: 082344289399}})

// can manually increment or decrement any number document
> db.users.updateOne({name: "Manuel"}, {$inc: {age: 2}})
> db.users.updateOne({name: "Manuel"}, {$inc: {age: -2}})

// also check with multiple query
> db.users.updateOne({name: "Manuel"}, {$inc: {age: -2}, $set:{isSporty: false}})

// two operations is not allowed into same fields.
> db.users.updateOne({name: "Manuel"}, {$inc: {age: -2}, $set:{age: 30}})

// update the age value with min value
> db.users.updateOne({name: "Chris"}, {$min: {age: 35}})
> db.users.updateOne({name: "Chris"}, {$max: {age: 39}})

// multiply age by a number specify 10 %
> db.users.updateOne({name: "Chris"}, {$mul: {age: 1.1}})

----------------------2. Updating Fields-----------------------------

$upsert

// Getting Rid of Fields

## want to drop all value on all persons who are sporty
> db.users.updateMany({isSporty: true}, {$set: {phone: null}})

// to get red of fields
> db.users.updateMany({isSporty: true}, {$unset: {phone: null}})

> db.users.updateMany({isSporty: true}, {$unset: {phone: ''}})

// Renaming Fields

$rename, $set, upsert

> db.users.updateMany({}, {$rename: {age: 'totalAge'}})
{ "acknowledged" : true, "matchedCount" : 4, "modifiedCount" : 3 }

## want to update some fields but does not know if its exist or not.
// if it is exist then override the document
// if it does not exist then create new document

// its normal insert and update
> db.users.updateOne({name: 'Maria'}, {$set: {age: 29, hobbies: [{title: 'Good food', frequency: 3}], isSporty: true}})
{ "acknowledged" : true, "matchedCount" : 0, "modifiedCount" : 0 }

> db.users.updateOne({name: 'Maria'}, {$set: {age: 29, hobbies: [{title: 'Good food', frequency: 3}], isSporty: true}}, {upsert: false})

// this works perfectly
// work with filter
> db.users.updateOne({name: 'Maria'}, {$set: {age: 29, hobbies: [{title: 'Good food', frequency: 3}], isSporty: true}}, {upsert: true})

-------------------------3. Updating Arrays---------------------------

.$, $[], $push, $pop, $pull, $each, $addToSet

## want to find a certain amount of persons and persons based on the hobbies array

// checking query into array same elements but not working perfectly
> db.users.find({$and: [{'hobbies.title': 'Sports'},{'hobbies.frequency': {$gte:3}}]}).pretty()

// this is the exact query
> db.users.find({hobbies: {$elemMatch: {title: 'Sports',frequency: {$gte:3}}}}).pretty()

// updating hole matched array elements
// here .$ -> this will automatically refer to the element in our filter  as i want to update the element in hobbies which matched the condition
// $--> dollar sign is a place holder here

// adding new field
> db.users.updateMany({hobbies: {$elemMatch: {title: 'Sports',frequency: {$gte:3}}}}, {$set : {"hobbies.$.highFrequency": true}})

// updating All Array Elements
> db.users.find({'hobbies.frequency': {$gt: 2}}).pretty()
> db.users.find({'hobbies.frequency': {$gt: 2}}).count()

// updating the elements
// but this won't work properly
> db.users.updateMany({'hobbies.frequency': {$gt: 2}}, {$set: {'hobbies.$.goodFrequency': true}})

## lets say if totalAge is greater than 30 than we want to update the every array elements
// do not override
// .$[] --> update all array elements and for each element because we have embedded document.
> db.users.updateMany({totalAge: {$gt: 30}}, {$inc: {'hobbies.$[].frequency': -1}})

## want to find all hobbies with a frequency greater than 2
> db.users.find({'hobbies.frequency': {$gt: 2}}).pretty()

// el --> is a identifier for every items of array into documents
// {'hobbies.frequency': {$gt: 2}} --> this filter identify documents
// {'el.frequency': {$gt: 2}} --> this filter which identify array elements
// these two are not equal

> db.users.updateMany({'hobbies.frequency': {$gt: 2}}, {$set: {'hobbies.$[el].goodFrequency': true}}, {arrayFilters: [{'el.frequency': {$gt: 2}}]})
{ "acknowledged" : true, "matchedCount" : 4, "modifiedCount" : 2 }

// Adding Elements to Arrays
// taking also old array
> db.users.updateOne({name: 'Maria'}, {$push: {hobbies: {title: 'Sports', frequency: 2}}})

// $push also used with more than one document
// also use $sort, $sort is related with every $each
> db.users.updateOne({name: 'Maria'}, {$push: {hobbies: {$each: [{title: 'Good Wine', frequency: 1}, {title: 'Good Wine', frequency: 2}], $sort: {frequency: -1}}}})

// Removing Elements from array
// $pull describe an object that what we want to pull
> db.users.updateOne({name: 'Maria'}, {$pull: {hobbies: {title: 'Hiking'}}})

// Remove the last element of an array
> db.users.updateOne({name: 'Chris'}, {$pop: {hobbies: 1}})

// Remove the first element of an array
> db.users.updateOne({name: 'Chris'}, {$pop: {hobbies: -1}})

// Understanding $addToSet
// $addToSet adds unique value only
// its basically add new element.But if the element already exist(have to exact same) it does not update.
> db.users.updateOne({name: 'Maria'}, {$addToSet: {hobbies: {title: 'Hiking', frequency: 2}}})
