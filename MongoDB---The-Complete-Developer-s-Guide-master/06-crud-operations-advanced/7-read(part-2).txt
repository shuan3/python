
--------------------------4.Evaluation Operators---------------------

$expr, $regex, $text, $where

// $regex allows us search for text

// return the document that found the word
// it is not  best way to find text in this way
> db.movies.find({summary: {$regex: /musical/}}).pretty()


$expr --> compare two fields inside one document then return that fields

> use financialDatalet retrieve_code = request.params.id;
switched to db financialData
> db.sales.insertMany([{volume: 100, target: 120},{volume: 89, target: 80},{volume: 200, target: 177}])

> db.sales.find().pretty()
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836d"),
	"volume" : 100,
	"target" : 120
}
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836e"),
	"volume" : 89,
	"target" : 80
}
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836f"),
	"volume" : 200,
	"target" : 177
}

## we want to find all entries, all items in this collection where the volume is above the target

// we have to use double quotes in to query, have to pass reference fields name
// have to use dollar sign before fields also

// this will not work
> db.sales.find({$expr: {$gt: ['volume', 'target']}}).pretty()

// this work successfully
> db.sales.find({$expr: {$gt: ['$volume', '$target']}}).pretty()

{
	"_id" : ObjectId("5f17491c3a76a40cd42b836e"),
	"volume" : 89,
	"target" : 80
}
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836f"),
	"volume" : 200,
	"target" : 177
}

## we do not want to compare whether volume is greater than target and also (want to find if volume is above 190 and the difference to target at least 10)

// this is more complex query
$cond --> conditional because we are in document

> db.sales.find({$expr: {$gt: [{$cond: {if: {$gte: ['$volume', 190]}, then: {$subtract: ['$volume', 10]}, else: '$volume'}}, '$target']}}).pretty()
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836e"),
	"volume" : 89,
	"target" : 80
}
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836f"),
	"volume" : 200,
	"target" : 177
}

// if i increase the subtracted value logically then result might be changed

> db.sales.find({$expr: {$gt: [{$cond: {if: {$gte: ['$volume', 190]}, then: {$subtract: ['$volume', 30]}, else: '$volume'}}, '$target']}}).pretty()
{
	"_id" : ObjectId("5f17491c3a76a40cd42b836e"),
	"volume" : 89,
	"target" : 80
}


------------------------5.Array-------------------------

$elemMatch, $size , $all

> use user
switched to db user

// find all hobbies that are sports
// this won't work
> db.users.find({hobbies: 'Sports'}).pretty()

// also find nothing when using nested document
> db.users.find({hobbies: {title:'Sports'}}).pretty()

// this also can not a perfect value
> db.users.find({hobbies: {title:'Sports', frequency: 2}}).pretty()

// act an embedded document
// this is path embedded approach not only on a directly embedded documents
// this is similar to multiple embedded documents query

> db.users.find({'hobbies.title': 'Sports'}).pretty()
{
	"_id" : ObjectId("5f172a343a76a40cd42b836a"),
	"name" : "Max",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 3
		},
		{
			"title" : "Cooking",
			"frequency" : 6
		}
	],
	"phone" : 123495334
}
{
	"_id" : ObjectId("5f172c593a76a40cd42b836c"),
	"name" : "Anna",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 2
		},
		{
			"title" : "Yoga",
			"frequency" : 3
		}
	],
	"phone" : 1234953345,
	"age" : null
}

## want to find all users who have exactly 3 hobbies
> db.users.insertOne({name: 'Chris', hobbies: ['Sports', 'Cooking', 'Hiking']})
> db.users.find({'hobbies': {$size: 3}}).pretty()

## if want to query like hobbies greater than 3 or smaller. It does not support mongoDB
> use boxOffice
> db.moviestarts.find().pretty()

## want to find movies that have a genre of exactly thriller and action
// this won't work perfectly, here basically work with index ordering and also exact
// we are not concern about ordering
> db.moviestarts.find({genre: ['action', 'thriller']}).pretty()

// $all basically find if array have all fields like 'action', 'thriller'
> db.moviestarts.find({genre: {$all: ['action', 'thriller']}}).pretty()


## want to find all users who have a hobby of sports and the frequency should be grate or equal to 2
> db.users.find({$and: [{'hobbies.title': 'Sports'},{'hobbies.frequency': {$gte:2}}]}).pretty()

// if we change the query replace 2 with 3. does not work properly

{
	"_id" : ObjectId("5f172a343a76a40cd42b836a"),
	"name" : "Max",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 3
		},
		{
			"title" : "Cooking",
			"frequency" : 6
		}
	],
	"phone" : 123495334
}
{
	"_id" : ObjectId("5f172c593a76a40cd42b836c"),
	"name" : "Anna",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 2
		},
		{
			"title" : "Yoga",
			"frequency" : 3
		}
	],
	"phone" : 1234953345,
	"age" : null
}
// this work with different embedded document but we do not want that
// does not give the exact result
> db.users.find({$and: [{'hobbies.title': 'Sports'},{'hobbies.frequency': {$gte:3}}]}).pretty()

{
	"_id" : ObjectId("5f172a343a76a40cd42b836a"),
	"name" : "Max",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 3
		},
		{
			"title" : "Cooking",
			"frequency" : 6
		}
	],
	"phone" : 123495334
}
{
	"_id" : ObjectId("5f172c593a76a40cd42b836c"),
	"name" : "Anna",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 2
		},
		{
			"title" : "Yoga",
			"frequency" : 3
		}
	],
	"phone" : 1234953345,
	"age" : null
}
> db.users.find({$and: [{'hobbies.title': 'Sports'},{'hobbies.frequency': {$gte:3}}]}).pretty().count()

// we want to ensure that query have to perform into same document/element
// work properly
// perform query into single document

> db.users.find({hobbies: {$elemMatch:{title: 'Sports', frequency: {$gte: 3}}}}).pretty().pretty()
{
	"_id" : ObjectId("5f172a343a76a40cd42b836a"),
	"name" : "Max",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 3
		},
		{
			"title" : "Cooking",
			"frequency" : 6
		}
	],
	"phone" : 123495334
}


------------------------Understanding Cursors------------------------

// when we find() it basically getting the all data like 100 millions
// it can reduce if we include query

// here cursors basically a pointer
// cursor request batch to the server every time to get tha data

// If have a query that meets 1000 documents, but let's say you have a website where you only display 10 items, let's say 10 products you fetched at a time anyways, then there is no need to load all thousand results that matched your query right at the start.Instead you would only fetch the first 10,display them on the screen and then go ahead and fetch the next 10,when the user navigated to the next page or anything like that. This is the idea behind a cursor.

> use movieData
> db.movies.find().count()
240

// basically it returns 20 elements
> db.movies.find().pretty()

// type it for more
> it

// get exactly one document, because next() gives the next document
> db.movies.find().next()

// we can use JavaScript syntax in mongoShell
> const dataCursor = db.movies.find()
> dataCursor.next()
> dataCursor.next()

// printjson() is a mongoShell function that helps to print something into shell

// fetched all documents
> dataCursor.forEach(document => {printjson(document)})

// check have any next value
> dataCursor.hasNext()

// fetching data with sort()
// one means ascending
> db.movies.find().sort({'rating.average': 1}).pretty()

// minus one mean descending
> db.movies.find().sort({'rating.average': -1}).pretty()

// sort with multiple query
// here first sort the 'rating.average' and if 'rating.average' have same value into particular indexes and then runtime execute with descending if may exist
> db.movies.find().sort({'rating.average': 1, runtime: -1}).pretty()

// next() also exist with sort()
> db.movies.find().sort({'rating.average': 1, runtime: -1}).next()

// we can skip certain amount of elements
// it effective in pagination
// when we work with pagination we can skip the previous 10 elements
> db.movies.find().sort({'rating.average': 1, runtime: -1}).skip(10).pretty()

// skip() basically limit the amount of elements the cursor should retrieve at a time
// can still have include limit

// limit return the exact number of element
> db.movies.find().sort({'rating.average': 1,runtime: -1}).skip(100).limit(10).pretty()

// here order does not matter.
// Order check from right such(previousexample) : sort()->skip()->limit()
// what method we write first, it execute first


------------------Using Projection to Share our Results---------------------

## want to retrieve elements with specific fields
// we have no to check the other fields. they are executed by default

// here ID always include
> db.movies.find({}, {name: 1, genres: 1, runtime: 1, rating: 1}).pretty()

// to exclude the ID
> db.movies.find({}, {name: 1, genres: 1, runtime: 1, rating: 1, _id: 0}).pretty()

// can also use embedded document with path notation
> db.movies.find({}, {name: 1, genres: 1, runtime: 1, 'rating.average': 1, _id: 0}).pretty()

> db.movies.find({}, {name: 1, genres: 1, runtime: 1, 'rating.average': 1, 'schedule.time': 1,_id: 0}).pretty()

// can also add logic
> db.movies.find({'rating.average': {$gt: 8}}, {name: 1, genres: 1, runtime: 1, 'rating.average': 1, 'schedule.time': 1,_id: 0}).pretty()


-----------------------Projection in Arrays----------------------

// simply array query
> db.movies.find({genres: 'Drama'}).pretty()

// return the array projection of related query
> db.movies.find({genres: 'Drama'},{'genres.$': 1}).pretty()

// it does not work properly
> db.movies.find({genres: {$all: ['Drama', 'Horror']}},{'genres.$': 1}).pretty()

// this projection is element wise and exact query
// {$elemMatch: {$eq: 'Horror'}} --> this thing decide which item is displayed or not
> db.movies.find({genres: 'Drama'},{genres: {$elemMatch: {$eq: 'Horror'}}}).pretty()

// can also check with other element
> db.movies.find({'rating.average':{$gt: 9}},{genres: {$elemMatch: {$eq: 'Horror'}}}).pretty()


----------------------Projection Slice--------------------

// slicing array that i want
// can add any number
// $slice: 2 --> how many array elements we want to show from first
> db.movies.find({'rating.average':{$gt: 9}}, {genres: {$slice: 2}, name: 1}).pretty()

// can also be execute with array from
// 1--> What lengths of elements we want to skip (index - start from 1)
// 2--> How many element we want to show
> db.movies.find({'rating.average':{$gt: 9}}, {genres: {$slice: [1, 2]}, name: 1}).pretty()
// checking
> db.movies.find({_id: ObjectId("5f15a22a9bfbc37d06f66662")},{genres: 1}).pretty()

{
	"_id" : ObjectId("5f15a22a9bfbc37d06f66662"),
	"genres" : [
		"Drama",
		"Adventure",
		"Fantasy"
	]
}

> db.movies.find({'rating.average':{$gt: 9}}, {genres: {$slice: [2, 2]}, name: 1}).pretty()

{
	"_id" : ObjectId("5f15a22a9bfbc37d06f6662d"),
	"name" : "Berserk",
	"genres" : [
		"Horror"
	]
}
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f66662"),
	"name" : "Game of Thrones",
	"genres" : [
		"Fantasy"
	]
}
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f666b7"),
	"name" : "Breaking Bad",
	"genres" : [
		"Thriller"
	]
}
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f666c0"),
	"name" : "The Wire",
	"genres" : [ ]
}
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f666c1"),
	"name" : "Firefly",
	"genres" : [
		"Western"
	]
}
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f666d8"),
	"name" : "Stargate SG-1",
	"genres" : [
		"Science-Fiction"
	]
}
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f666e2"),
	"name" : "Rick and Morty",
	"genres" : [
		"Science-Fiction"
	]
}
