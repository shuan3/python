-------------------------READ--------------------------

1. Methods, Filters & Operations
2. Query Selectors (READ)
3. Projection Operators(READ)

Sample Example :

1. db.myCollection.find({age: 30)
here {age: 30 } --> Filter . age -> Field, 32 --> Value

2. db.myCollection.find({age: { $gt: 30}})
{age: { $gt: 30}} --> Filter(Range) &gt --> Operator

------------------- Operator--------------------

       Read                Update

 Query & Projection        Update         Query Modifiers          Aggregation

  Query Selectors--------->Fields-------->Change Query------------>Pipeline Stages
                                           Behaviors
 Projection Operators----->Arrays--------->   |       ----------->Pipeline Operators
                                              |
                                    This is Deprecated now

----------------How Operators Impact Our Data-----------------

      Type                  Purpose                    Changes Data?        Example

  Query Operator--------->Locate Data------------------> blocked-------------> $eq
 Projection Operator---->Modify data presentation------> blocked-------------> $
  Update Operator-------> Modify + add additional------> not blocked---------> &inc
                                  data


-----------------------Query Selectors types-----------------------

1. Comparison 2. Logical 3. Element 4. Evaluation 5. Array 6. Comments 7. Geaspatial(special)

------------------- Projections Operators---------------------

1. $ 2. $elemMatch 3. $meta 4. $slice


> use movieData
switched to db movieData
> cls

> db.movies.findOne()
{
	"_id" : ObjectId("5f15a22a9bfbc37d06f66616"),
	"id" : 1,
	"url" : "http://www.tvmaze.com/shows/1/under-the-dome",
	"name" : "Under the Dome",
	"type" : "Scripted",
	"language" : "English",
	"genres" : [
		"Drama",
		"Science-Fiction",
		"Thriller"
	],
	"status" : "Ended",
	"runtime" : 60,
	"premiered" : "2013-06-24",
	"officialSite" : "http://www.cbs.com/shows/under-the-dome/",
	"schedule" : {
		"time" : "22:00",
		"days" : [
			"Thursday"
		]
	},
	"rating" : {
		"average" : 6.5
	},
	"weight" : 91,
	"network" : {
		"id" : 2,
		"name" : "CBS",
		"country" : {
			"name" : "United States",
			"code" : "US",
			"timezone" : "America/New_York"
		}
	},
	"webChannel" : null,
	"externals" : {
		"tvrage" : 25988,
		"thetvdb" : 264492,
		"imdb" : "tt1553656"
	},
	"image" : {
		"medium" : "http://static.tvmaze.com/uploads/images/medium_portrait/0/1.jpg",
		"original" : "http://static.tvmaze.com/uploads/images/original_untouched/0/1.jpg"
	},
	"summary" : "<p><b>Under the Dome</b> is the story of a small town that is suddenly and inexplicably sealed off from the rest of the world by an enormous transparent dome. The town's inhabitants must deal with surviving the post-apocalyptic conditions while searching for answers about the dome, where it came from and if and when it will go away.</p>",
	"updated" : 1529612668,
	"_links" : {
		"self" : {
			"href" : "http://api.tvmaze.com/shows/1"
		},
		"previousepisode" : {
			"href" : "http://api.tvmaze.com/episodes/185054"
		}
	}
}

---------------------- 1.Comparison------------------------------

$ne, $eq, $lt, $lte, $gt, $gte, $in, $nin

> db.movies.find({runtime: 60}).pretty()
> db.movies.findOne({runtime: 60})

// exactly the same
>db.movies.findOne({runtime: {$eq: 60}})

> db.movies.find({runtime: {$ne: 60}}).pretty()
> db.movies.find({runtime: {$lt: 40}}).pretty()
> db.movies.find({runtime: {$lte: 40}}).pretty()
> db.movies.find({runtime: {$gt: 40}}).pretty()
> db.movies.find({runtime: {$gte: 40}}).pretty()

// query into imbedded documents
N.B : In imbedded documents have to use must quotes

> db.movies.find({"rating.average": {$gt: 7}}).pretty()

// query into imbedded array

> db.movies.find({genres:"Drama"}).pretty()
// to exact query
> db.movies.find({genres:["Drama"]}).pretty()

// it will find us all documents that have a runtime of 30 or 42 but not 60

[30,42] --> this is set of values not a range
> db.movies.find({runtime: {$in:[30,42]}}).pretty()
> db.movies.find({runtime: {$nin:[30,42]}}).pretty()


------------------------ 2.Logical--------------------------

$or, $and, $not, $nor

// multiple query

> db.movies.find({$or: [{"rating.average": {$lt: 5}},{"rating.average": {$gt: 9.3}}]}).count()
> db.movies.find({$or: [{"rating.average": {$lt: 5}},{"rating.average": {$gt: 9.3}}]}).pretty()

> db.movies.find({$nor: [{"rating.average": {$lt: 5}},{"rating.average": {$gt: 9.3}}]}).count()

// this is the older command
> db.movies.find({$and: [{"rating.average": {$gt: 9}},{genres : "Drama"}]}).count()
> db.movies.find({$and: [{"rating.average": {$gt: 9}},{genres : "Drama"}]}).pretty()

// latest command (using only document)
> db.movies.find({"rating.average": {$gt: 9}, genres : "Drama"}).count()

// this basically not work, does not give right value
// same object is not permitted int this way
// here issue is create by same json key genres, this keys value replace the first one when execute second

> db.movies.find({genres : "Drama", genres: 'Horror'}).count()

// this also have same result
> db.movies.find({genres: 'Horror'}).count()



// we have to use and in the same field
// in this issue we have to use $and must
> db.movies.find({$and: [{genres : "Drama"}, {genres: 'Horror'}]}).count()
> db.movies.find({runtime: {$not :{$eq: 60}}}).count()

// this is also equal to the $ne
> db.movies.find({runtime: {$ne: 60}}).count()

------------------------------ 3.Element---------------------------
$exists $type

// exists

> db.users.insertMany([{name: 'Max', hobbies: [{title: 'Sports', frequency: 3},{title: 'Cooking', frequency: 6}], phone: 0123495334},{name: 'Manuel', hobbies: [{title: 'Cooking', frequency: 5},{title: 'Cars', frequency: 6}], phone: '043453495334', age: 30}])
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("5f172a343a76a40cd42b836a"),
		ObjectId("5f172a343a76a40cd42b836b")
	]
}
> db.users.find().pretty()
{
	"_id" : ObjectId("5f172a343a76a40cd42b836a"),
	"name" : "Max",
	"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 3
		},
		{
			"title" : "Cooking",
			"frequency" : 6
		}
	],
	"phone" : 123495334
}
{
	"_id" : ObjectId("5f172a343a76a40cd42b836b"),
	"name" : "Manuel",
	"hobbies" : [
		{
			"title" : "Cooking",
			"frequency" : 5
		},
		{
			"title" : "Cars",
			"frequency" : 6
		}
	],
	"phone" : "043453495334",
	"age" : 30
}

// here checking an element exists or not
> db.users.find({age: {$exists: true}}).pretty()
{
	"_id" : ObjectId("5f172a343a76a40cd42b836b"),
	"name" : "Manuel",
	"hobbies" : [
		{
			"title" : "Cooking",
			"frequency" : 5
		},
		{
			"title" : "Cars",
			"frequency" : 6
		}
	],
	"phone" : "043453495334",
	"age" : 30
}

// can also check multiple logic
> db.users.find({age: {$exists: true, $gt: 30}}).pretty()
> db.users.find({age: {$exists: true, $gte: 30}}).pretty()

// if element value is null then it also be exists
> db.users.insertMany([{name: 'Anna', hobbies: [{title: 'Sports', frequency: 2},{title: 'Yoga', frequency: 3}], phone: 01234953345, age: null}])
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("5f172c593a76a40cd42b836c")
	]
}
> db.users.find({age: {$exists: true}}).pretty()

// but if we check with exists value is false and if an element value has null but exist then it also does not show
> db.users.find({age: {$exists: false}}).pretty()

// checking exit and value not equal null
> db.users.find({age: {$exists: true, $ne: null}}).pretty()

// type
Type 	            Number       Alias           	Notes
Double    	      1         “double”
String   	      2 	“string”
Object  	      3 	“object”
Array 	              4 	“array”
Binary data 	      5 	“binData”
Undefined 	      6 	“undefined” 	       Deprecated.
ObjectId 	      7 	“objectId”
Boolean 	      8 	“bool”
Date 	              9 	“date”
Null 	             10 	“null”
Regular Expression   11 	“regex”
DBPointer 	     12 	“dbPointer” 	       Deprecated.
JavaScript 	     13 	“javascript”
Symbol 	             14 	“symbol” 	       Deprecated.
JavaScript (with scope)15 	“javascriptWithScope”
32-bit integer 	     16 	“int”
Timestamp 	     17 	“timestamp”
64-bit integer 	     18 	“long”
Decimal128 	     19 	“decimal” 	       New in version 3.4.
Min key 	     -1 	“minKey”
Max key 	    127 	“maxKey”

// checking with alias
> db.users.find({phone: {$type: 'number'}}).pretty()

// as shell is based on JavaScript number and double would be the same answer
// In database number is stored into floating point number as double
// JS drivers only knows it always double

> db.users.find({phone: {$type: 'double'}}).pretty()

// also can add multiple type
> db.users.find({phone: {$type: ['double','string']}}).pretty()
